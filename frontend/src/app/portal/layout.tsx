'use client'

import type { Metadata } from 'next'
import { Inter, Poppins } from 'next/font/google'
import './globals.css'
import { ContextProvider } from '../../contextAPI/context'
import { useRouter } from 'next/navigation'
import LoggedHeader from '@/components/Headers/logged-header'
import { useEffect } from 'react'
import { AuthStoreProvider, useAuthStore } from '@/stores/auth/auth.provider'
import { ClipLoader } from 'react-spinners'

const inter = Inter({
  subsets: ['latin'],
  variable: '--font-inter',
  display: 'swap',
})

const poppins = Poppins({
  subsets: ['latin'],
  weight: ['400', '700'],
  variable: '--font-poppins',
  display: 'swap',
})

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

export default function PortalLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  return (
    <AuthStoreProvider>
      <AuthWrap>
        <ContextProvider>
          <html lang="en">
            <body
              className={`${inter.variable} ${poppins.variable} antialiased`}
            >
              {children}
            </body>
          </html>
        </ContextProvider>
      </AuthWrap>
    </AuthStoreProvider>
  )
}

export function AuthWrap({
  children,
}: Readonly<{ children: React.ReactNode }>) {
  const router = useRouter()
  const { hasHydrated, token } = useAuthStore((store) => ({
    hasHydrated: store.hasHydrated,
    token: store.token,
  }))
  useEffect(() => {
    if (hasHydrated && !token) {
      router.replace('/401-page')
    }
  }, [hasHydrated, token, router])

  if (!hasHydrated)
    return (
      <div className="flex flex-col m-auto h-screen justify-center items-center">
        <ClipLoader color="#92400e" size={150} />
      </div>
    )
  if (!token)
    return (
      <div className="flex flex-col m-auto h-screen justify-center items-center">
        <ClipLoader color="#92400e" size={150} />
      </div>
    )
  return (
    <>
      <LoggedHeader /> <main>{children}</main>
    </>
  )
}
